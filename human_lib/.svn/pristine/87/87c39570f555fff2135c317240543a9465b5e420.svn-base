package shop.j980108.controller;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.ui.ModelMap;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;

import lombok.Setter;
import lombok.extern.log4j.Log4j;
import shop.j980108.domain.LoansVo;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({"file:src/main/webapp/WEB-INF/spring/root-context.xml",
	"file:src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml"})
@Log4j
@WebAppConfiguration
public class LoansControllerTests {
	
	@Autowired @Setter
	private WebApplicationContext ctx;
	private MockMvc mvc;
	
	@Before
	public void setup() {
		mvc = MockMvcBuilders.webAppContextSetup(ctx).build();
	}
	
	/** 소장 도서 정보(possession) 1건 조회 */
	@Test
	public void testGetPossession() throws Exception {
		ModelMap map = mvc.perform(MockMvcRequestBuilders.get("/possession/detail").param("bkno", "3"))
			.andReturn()
			.getModelAndView()
			.getModelMap();
		log.info(map.get("possession"));
	}

	// 공통 ------------------------------------------------------------------------------------
	
	/** 대출예약 */
	@Test
	public void testReserveLoans() throws Exception {
		LoansVo loansVo = new LoansVo();
		loansVo.setBkno(186L);
		loansVo.setId("아이디1");
		String jsonStr = new Gson().toJson(loansVo);
		log.info("jsonStr ::" + jsonStr);
		mvc.perform(post("/loans/reserveLoans")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(jsonStr))
				.andExpect(status().is(200));
	}
	
	/** 대출 예약 상태 변경 */
	@Test
	public void testUpdateLoansReservationStatus() throws Exception {
		LoansVo loansVo = new LoansVo();
		loansVo.setStatus(3);
		loansVo.setLno(61L);
		String jsonStr = new Gson().toJson(loansVo);
		log.info("jsonStr ::" + jsonStr);
		mvc.perform(post("/loans/updateLoansReservationStatus")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.content(jsonStr))
				.andExpect(status().is(200));
	}
	
	// 관리자 ------------------------------------------------------------------------------------

	/** 대출 예약 신청 현황 리스트 (모든 회원) */
	@Test
	public void testLoansReservationRequestList() throws Exception {
		ModelMap map = mvc.perform(MockMvcRequestBuilders.get("/loans/loansreservationrequestlist")
				.param("pageNum", "2")
				.param("amount", "10"))
			.andReturn()
			.getModelAndView()
			.getModelMap();
		List<?> list= (List<?>)map.get("list");
		list.forEach(log::info);
	}
	
	/** 대출 예약 확정 현황 리스트 (모든 회원) */
	@Test
	public void testLoansReservationAcceptList() throws Exception {
		ModelMap map = mvc.perform(MockMvcRequestBuilders.get("/loans/loansreservationacceptlist")
				.param("pageNum", "1")
				.param("amount", "10"))
			.andReturn()
			.getModelAndView()
			.getModelMap();
		List<?> list= (List<?>)map.get("list");
		list.forEach(log::info);
	}	
}
