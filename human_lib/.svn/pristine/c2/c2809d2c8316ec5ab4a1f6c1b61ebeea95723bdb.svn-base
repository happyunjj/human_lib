package shop.j980108.service;

import java.util.Map;

import javax.inject.Inject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import edu.emory.mathcs.backport.java.util.Arrays;
import lombok.Setter;
import shop.j980108.domain.AuthVo;
import shop.j980108.domain.MemberVo;
import shop.j980108.mapper.MemberMapper;

@Service
public class MemberServiceImpl implements MemberService{
	//@Inject MemberMapper mpr;
	@Autowired @Setter
	MemberMapper membermapper;
	@Autowired @Setter
	BCryptPasswordEncoder pwdEncoder;
	
	
	//@SuppressWarnings("unchecked")
	@Override @Transactional
	public void memberJoin(Map<String, Object> member) throws Exception{
		
		//mpr.memberJoin((Map<String, Object>) member);
		membermapper.memberJoin(member);
//		member.setPwd(pwdEncoder.encode(member.getPwd()));
//		member.setAuths(Arrays.asList(new AuthVo[] {new AuthVo(member.getId(), "ROLE_MEMBER")}));
//		member.getAuths().forEach(membermapper::authJoin);
	}

	@Override
	public int memberLogin(MemberVo member) throws Exception{
		return membermapper.memberLogin(member);
	}

	@Override
	public MemberVo login(MemberVo member) throws Exception{
		return membermapper.login(member);
	}

	@Override
	public void memberDelete(MemberVo member) throws Exception {
		membermapper.memberDelete(member);
	}

	@Override
	public void authJoin(Map<String, Object> member) throws Exception {
		membermapper.authJoin(member);
	}
}
