package shop.j980108.controller;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;
import shop.j980108.domain.Criteria;
import shop.j980108.domain.LoansVo;
import shop.j980108.domain.PageDTO;
import shop.j980108.domain.SmsVo;
import shop.j980108.service.LoansService;

/**
 * @author 박인영
 * @date 2021-10-26 ~ 
 * @name 대출 Controller
 */
@Controller
@Log4j
@RequestMapping("/loans")
@AllArgsConstructor
public class LoansController {
	
	private LoansService service;

	/** 대출 예약 by Member <br>
	 * - 필수 파라메터 : #{bkno}, #{id} 
	 * (1) 회원만 대출예약이 가능하다. <br> "로그인하셔야 예약이 가능합니다. 로그인 하시겠습니까?"
	 * X (2) 패널티를 받지 않는 회원만 대출예약이 가능하다. <br> "대출 연체건으로 YYYY/MM/DD까지 대출예약이 불가능합니다"
	 * X (3) 현재 대출/대출예약 중인 도서수의 합계가 5권을 초과할 수 없다. <br> "이미 대출 또는 대출예약된 도서가  5권입니다. 반납 또는 대출예약취소 후 이용해주세요"
	 * X (4) 대출가능 도서만 대출예약이 가능하다. <br> "해당 도서는 현재 대출예약이 불가능한 도서입니다."
	 * (5) 대출예약시 대출테이블에 튜플이 추가된다. <br>
	 * (6) 소장도서의 상태가 0(대출가능)에서 1(대출예약중)로 변경된다. <br>
	 * (7) 회원의 대출중도서수 합계가 1 증가한다. <br>
	 * X (8) 대출예약 확인문자가 발송된다. <br>
	 * X (9) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */  
	//@PreAuthorize("isAuthenticated()")
	@PostMapping("reserveLoans")
	@ResponseBody 
	public String reserveLoans(@RequestBody LoansVo loans) {
		service.reserveLoans(loans);
		return "success";
	}
	
	/** 대출 예약 취소 by Member <br>
	 * - 필수 파라메터 : #{lno}, #{bkno}, #{id}, #{status == 1}
	 * - 사용자가 대출 예약 후 예약을 취소할 수 있다. <br>
	 * (1) 대출예약 당사자만 취소가 가능하다. <br>
	 * X (2) 대출예약일과 대출만기일에만 (STATUS가 0이어야만) 취소가 가능하다. <br>
	 * (3) 대출 상태가 0(대출 예약 신청)에서 1(예약 사용자 취소)로 변경된다. <br>
	 * (4) 소장도서의 상태가 2(대출예약중)에서 0(대출가능)으로 변경된다. <br>
	 * (5) 회원의 대출중 도서수 합계가 1 감소한다. <br>
	 * X (6) 대출예약 사용자취소 문자가 발송된다. <br>
	 * X (7) 문자발송 성공시 문자 테이블에 튜플이 추가된다. <br> <br>
	 */
	//@PreAuthorize("principal.username == #loansVo.id")
	@PostMapping("cancleLoansReservationByMember")
	@ResponseBody 
	public void cancleLoansReservationByMember(@RequestBody LoansVo loans) {
		service.cancleLoansReservation(loans);
	}
	
	/** 대출 예약 취소 by Task
	 * - 필수 파라메터 : #{lno}, #{bkno}, #{id}, #{status == 2}
	 * - 사용자가 대출만기일까지 대출하지 않으면 만기일 도서관 영업 종료 시간에 자동으로 예약이 취소된다. <br>
	 * (1) 대출 상태가 0(대출 예약 신청)에서 2(예약 자동 취소)로 변경된다. <br>
	 * (2) 소장도서의 상태가 2(대출예약중)에서 0(대출가능)으로 변경된다. <br>
	 * (3) 회원의 대출중 도서수 합계가 1 감소한다. <br>
	 * X (4) 대출예약 자동 취소 문자가 발송된다. <br>
	 * X (5) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("cancleLoansReservationByTask")
	public @ResponseBody void cancleLoansReservationByTask(@RequestBody LoansVo loans) {
		service.cancleLoansReservation(loans);
	}
	
	/** 대출 예약 취소 by Manager <br>
	 * - 필수 파라메터 : #{lno}, #{bkno}, #{id}, #{status == 3} 
	 * - 관리자가 도서 픽업 중 도서 상태(분실, 훼손 등)를 확인 후 대출 예약을 취소할 수 있다. <br>
	 * (1) 대출 상태가 0(대출 예약 신청)에서 3(예약 관리자 취소)로 변경된다. <br>
	 * (2) 소장도서의 상태가 2(대출예약중)에서 3(대출불가)으로 변경된다. <br>
	 * (3) 회원의 대출중 도서수 합계가 1 감소한다. <br>
	 * X (4) 대출예약 관리자 취소 문자가 발송된다. <br>
	 * X (5) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("cancleLoansReservationByManager")
	@ResponseBody 
	public void cancleLoansReservationByManager(@RequestBody LoansVo loans) {
		service.cancleLoansReservationByManager(loans);
	}
	
	/** 대출 예약 확정 by manager <br> 
	 * - 필수 파라메터 : #{lno}
	 * - 관리자가 대출 예약 신청이 들어온 소장도서를 픽업하여 대출 예약을 확정한다. <br>
	 * (1) 대출의 상태가 0(대출 예약 신청)에서 4(예약확정)로 변경된다. <br>
	 * X (2) 대출예약 확정 안내 문자가 발송된다. <br>
	 * X (3) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("acceptLoans")
	@ResponseBody 
	public void acceptLoans(@RequestBody LoansVo loans) {
		service.acceptLoans(loans);
	}
	
	/** 대출 완료 by manager <br> 
	 * - 필수 파라메터 : #{lno}, #{bkno}
	 * - 사용자가 대출만기일 이내에 도서관에서 대출을 완료한다. <br>
	 * X (1) 패널티를 받지 않은 회원만 대출이 가능하다.
	 * X (2) 관리자가 대출 완료처리를 할 수 있다.
	 * (3) 대출의 상태가 4(예약확정)에서 5(대출)로 변경된다. <br>
	 * (4) 소장 도서의 상태가 1(대출예약중)에서 2(대출중)으로 변경된다. <br>
	 * X (5) 대출 후 반납예정일에 대한 안내 문자가 발송된다. <br>
	 * X (6) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("completeLoans")
	@ResponseBody 
	public String completeLoans(@RequestBody LoansVo loans) {
		service.completeLoans(loans);
		return "success";
	}
	
	/** 현장 대출 by Manager <br>
	 * - 필수 파라메터 : #{bkno}, #{id}
	 * - 사용자는 대출 예약 없이도 도서관에서 직접 대출을 할 수 있다. <br>
	 * X (1) 관리자만 현장 대출을 처리할 수 있다.
	 * X (2) 가입한 회원의 대출만 처리가 가능하다.
	 * X (3) 패널티를 받지 않은 회원만 대출이 가능하다.
	 * X (4) 현재 대출/대출예약 중인 도서수의 합계가 5권을 초과할 수 없다.	
	 * (5) 대출테이블에 튜플이 추가된다. <br>
	 * (6) 소장도서의 상태가 0(대출가능)에서 2(대출중)로 변경된다. <br>
	 * (7) 회원의 대출중도서수 합계가 1 증가한다. <br>
	 * X (8) 대출 후 반납예정일에 대한 안내 문자가 발송된다.	 <br>
	 * X (9) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 * */
	@PostMapping("loans")
	@ResponseBody 
	public void loans(@RequestBody LoansVo loans) {
		service.loans(loans);
	}

	/** 대출 연체 처리 by Task <br>
	 * - 필수 파라메터 : X
	 * - 사용자가 반납예정일 이내에 반납처리 하지 않으면 일정 시간에 연체처리 된다. <br>
	 * (1) 매일 9시 전날 반납예정일이었던 대출 건 중 반납처리 되지 않은 건들의 상태를 5(대출)에서 6(연체)로 변경된다. <br>
	 * (2) 해당 회원에게 연체되었음을 안내하고 반납을 독촉하는 문자를 발송한다. <br>
	 * X (3) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 * */
	@PostMapping("checkLoansOverdue")
	@ResponseBody 
	public List<SmsVo> checkLoansOverdue() {
		return service.checkLoansOverdue();
	}
	
	/** 도서 반납 by Manager <br>
	 * - 필수 파라메터 : #{lno}, #{bkno}, #{id}, #{status == 7}
	 * - 사용자가 도서관에 도서를 반납하면 관리자가 반납처리를 한다. <br>
	 * (1) 대출 상태가 5(대출) 또는 6(연체)에서 7(반납)로 변경된다. <br>
	 * (2) 소장 도서의 상태가 0(대출가능)으로 변경된다. <br>
	 * (3) 회원의 대출중도서수 합계가 1 감소한다. <br>
	 * X (4) 연체되었다면 연체일수만큼 패널티가 부과된다. <br>
	 * X (5) 도서 반납이 완료되었음을 안내하는 문자를 발송한다. <br>
	 * X (6) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("returnLoans")
	@ResponseBody 
	public void returnLoans(@RequestBody LoansVo loans) {
		service.returnLoans(loans);
	}
	
	/** 도서 영구미반납 by Manager <br>
	 * - 필수 파라메터 : #{lno}, #{bkno}, #{id}
	 * - 사용자가 도서관에 도서를 반납할 수 없음을 알렸을 때 (분실, 훼손 등) 관리자가 관련 처리를 한다. <br>
	 * (1) 대출 상태가 5(대출) 또는 6(연체)에서 8(영구미반납)로 변경된다. <br>
	 * (2) 소장 도서의 상태가 3(대출불가(분실, 훼손 등)으로 변경된다. <br>
	 * (3) 회원의 대출중도서수 합계가 1 감소한다. <br>
	 * X (4) 연체되었다면 연체일수만큼 패널티가 부과된다. <br>
	 * X (5) 도서 반납이 완료되었음을 안내하는 문자를 발송한다. <br>
	 * X (6) 문자발송 성공시 문자 테이블에 튜플이 추가된다.
	 */
	@PostMapping("notReturnLoans")
	@ResponseBody 
	public void notReturnLoans(@RequestBody LoansVo loans) {
		loans.setStatus(8);
		service.notReturnLoans(loans);
		
	}
	
	/** 대출 예약 현황 리스트 by Member <br>
	 * - 필수 파라메터 : #{id}
	 * - 사용자는 본인이 예약한 현황을 조회할 수 있다. <br>
	 * - 대출 상태가 0(예약신청)인 건과 4(예약확정)인 건을 함께 조회한다.
	 */
	@GetMapping("listLoansReservationForMember")
	public void listLoansReservationForMember(Model model, String id) {
		model.addAttribute("list", service.listLoansReservationForMember(id)); 
	}
	
	/** 대출 예약 현황 리스트 by Manager <br>
	 * - 필수 파라메터 : #{status}
	 * - 관리자는 사용자들이 대출 예약 신청한 현황을 조회할 수 있다. <br>
	 * - status 값이 0인 경우 대출 예약 신청 현황이 조회된다. <br>
	 * - status 값이 4인 경우 대출 예약 확정(대출을 위한 픽업 완료상태) 현황이 조회된다.
	 */
	@GetMapping("listLoansReservationForManager")
	public void listLoansReservationForManager(Model model, Criteria cri, int status) {
		model.addAttribute("list", service.listLoansReservationForManager(cri, status));
		model.addAttribute("page", new PageDTO(service.getLoansStatusTotalCount(status), cri));
	}
	
	/** 대출중 리스트 by Member <br>
	 * - 필수 파라메터 : #{id}
	 * - 사용자는 본인이 대출한 현황을 조회할 수 있다. <br>
	 * - 대출 상태가 5(대출)인 건과 6(연체)인 건을 함께 조회한다.
	 */
	@GetMapping("listLoansForMember")
	public void listLoansForMember(Model model, String id) {
		model.addAttribute("list", service.listLoansForMember(id));
	}
	
	/** 대출중 리스트 by Manager <br>
	 * - 관리자는 사용자들이 대출한 현황을 조회할 수 있다. <br>
	 * - 대출 상태가 5(대출)인 건과 6(연체)인 건을 함께 조회한다.
	 */
	@GetMapping("listLoansForManager")
	public void listLoansForManager(Model model, Criteria cri) {
		model.addAttribute("list", service.listLoansForManager(cri));
		model.addAttribute("page", new PageDTO(service.getLoansDualStatusTotalCount(5, 6), cri));
	}
	
	/** 최근 반납 완료 리스트 by Member <br>
	 * - 필수 파라메터 : #{id}
	 * - 사용자가 무인 반납기를 이용하여 반납할 경우 반납처리가 잘 되었는지 확인하기 위한 조회이다. <br>
	 * - 최근 일주일 간의 반납 완료된 건을 조회할 수 있다.
	 */
	@GetMapping("listReturnedLoansRecently")
	public void listReturnedLoansRecently(Model model, Criteria cri, String id) {
		model.addAttribute("list", service.listReturnedLoansRecently(cri, id));
		model.addAttribute("page", new PageDTO(service.getLoansDualStatusTotalCount(7, 8), cri));
	}
	
	/** 반납 완료 대출 리스트 by Member <br>
	 * - 필수 파라메터 : #{id}
	 * - 사용자는 반납이 완료된 지난 대출 내역을 조회할 수 있다.
	 */
	@GetMapping("listReturnedLoans")
	public void listReturnedLoans(Model model, Criteria cri, String id) {
		model.addAttribute("list", service.listReturnedLoans(cri, id));
		model.addAttribute("page", new PageDTO(service.getLoansDualStatusTotalCount(7, 8), cri));
	}
	
}
